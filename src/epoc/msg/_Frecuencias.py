"""autogenerated by genpy from epoc/Frecuencias.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Frecuencias(genpy.Message):
  _md5sum = "d0613b2dd48ef9386b459a8613f058ce"
  _type = "epoc/Frecuencias"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 sen1
float64 sen2
float64 sen3
float64 sen4
float64 sen5
float64 sen6
float64 sen7
float64 sen8
float64 sen9
float64 sen10
float64 sen11
float64 sen12
float64 sen13
float64 sen14

"""
  __slots__ = ['sen1','sen2','sen3','sen4','sen5','sen6','sen7','sen8','sen9','sen10','sen11','sen12','sen13','sen14']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sen1,sen2,sen3,sen4,sen5,sen6,sen7,sen8,sen9,sen10,sen11,sen12,sen13,sen14

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frecuencias, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sen1 is None:
        self.sen1 = 0.
      if self.sen2 is None:
        self.sen2 = 0.
      if self.sen3 is None:
        self.sen3 = 0.
      if self.sen4 is None:
        self.sen4 = 0.
      if self.sen5 is None:
        self.sen5 = 0.
      if self.sen6 is None:
        self.sen6 = 0.
      if self.sen7 is None:
        self.sen7 = 0.
      if self.sen8 is None:
        self.sen8 = 0.
      if self.sen9 is None:
        self.sen9 = 0.
      if self.sen10 is None:
        self.sen10 = 0.
      if self.sen11 is None:
        self.sen11 = 0.
      if self.sen12 is None:
        self.sen12 = 0.
      if self.sen13 is None:
        self.sen13 = 0.
      if self.sen14 is None:
        self.sen14 = 0.
    else:
      self.sen1 = 0.
      self.sen2 = 0.
      self.sen3 = 0.
      self.sen4 = 0.
      self.sen5 = 0.
      self.sen6 = 0.
      self.sen7 = 0.
      self.sen8 = 0.
      self.sen9 = 0.
      self.sen10 = 0.
      self.sen11 = 0.
      self.sen12 = 0.
      self.sen13 = 0.
      self.sen14 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_14d.pack(_x.sen1, _x.sen2, _x.sen3, _x.sen4, _x.sen5, _x.sen6, _x.sen7, _x.sen8, _x.sen9, _x.sen10, _x.sen11, _x.sen12, _x.sen13, _x.sen14))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.sen1, _x.sen2, _x.sen3, _x.sen4, _x.sen5, _x.sen6, _x.sen7, _x.sen8, _x.sen9, _x.sen10, _x.sen11, _x.sen12, _x.sen13, _x.sen14,) = _struct_14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_14d.pack(_x.sen1, _x.sen2, _x.sen3, _x.sen4, _x.sen5, _x.sen6, _x.sen7, _x.sen8, _x.sen9, _x.sen10, _x.sen11, _x.sen12, _x.sen13, _x.sen14))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.sen1, _x.sen2, _x.sen3, _x.sen4, _x.sen5, _x.sen6, _x.sen7, _x.sen8, _x.sen9, _x.sen10, _x.sen11, _x.sen12, _x.sen13, _x.sen14,) = _struct_14d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_14d = struct.Struct("<14d")
