/* Auto-generated by genmsg_cpp for file /home/carlos/fuerte_workspace/sandbox/epoc/msg/Frecuencias.msg */
#ifndef EPOC_MESSAGE_FRECUENCIAS_H
#define EPOC_MESSAGE_FRECUENCIAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace epoc
{
template <class ContainerAllocator>
struct Frecuencias_ {
  typedef Frecuencias_<ContainerAllocator> Type;

  Frecuencias_()
  : datos()
  {
    datos.assign(0.0);
  }

  Frecuencias_(const ContainerAllocator& _alloc)
  : datos()
  {
    datos.assign(0.0);
  }

  typedef boost::array<double, 14>  _datos_type;
  boost::array<double, 14>  datos;


  typedef boost::shared_ptr< ::epoc::Frecuencias_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::epoc::Frecuencias_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Frecuencias
typedef  ::epoc::Frecuencias_<std::allocator<void> > Frecuencias;

typedef boost::shared_ptr< ::epoc::Frecuencias> FrecuenciasPtr;
typedef boost::shared_ptr< ::epoc::Frecuencias const> FrecuenciasConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::epoc::Frecuencias_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::epoc::Frecuencias_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace epoc

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::epoc::Frecuencias_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::epoc::Frecuencias_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3cc745c08934b0cd21fbac2bdbf11b12";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3cc745c08934b0cdULL;
  static const uint64_t static_value2 = 0x21fbac2bdbf11b12ULL;
};

template<class ContainerAllocator>
struct DataType< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "epoc/Frecuencias";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[14] datos\n\
";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::epoc::Frecuencias_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::epoc::Frecuencias_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.datos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Frecuencias_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::epoc::Frecuencias_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::epoc::Frecuencias_<ContainerAllocator> & v) 
  {
    s << indent << "datos[]" << std::endl;
    for (size_t i = 0; i < v.datos.size(); ++i)
    {
      s << indent << "  datos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.datos[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // EPOC_MESSAGE_FRECUENCIAS_H

