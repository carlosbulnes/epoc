/* Auto-generated by genmsg_cpp for file /home/carlos/fuerte_workspace/sandbox/epoc/msg/Frecuencias.msg */
#ifndef EPOC_MESSAGE_FRECUENCIAS_H
#define EPOC_MESSAGE_FRECUENCIAS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace epoc
{
template <class ContainerAllocator>
struct Frecuencias_ {
  typedef Frecuencias_<ContainerAllocator> Type;

  Frecuencias_()
  : sen1(0.0)
  , sen2(0.0)
  , sen3(0.0)
  , sen4(0.0)
  , sen5(0.0)
  , sen6(0.0)
  , sen7(0.0)
  , sen8(0.0)
  , sen9(0.0)
  , sen10(0.0)
  , sen11(0.0)
  , sen12(0.0)
  , sen13(0.0)
  , sen14(0.0)
  {
  }

  Frecuencias_(const ContainerAllocator& _alloc)
  : sen1(0.0)
  , sen2(0.0)
  , sen3(0.0)
  , sen4(0.0)
  , sen5(0.0)
  , sen6(0.0)
  , sen7(0.0)
  , sen8(0.0)
  , sen9(0.0)
  , sen10(0.0)
  , sen11(0.0)
  , sen12(0.0)
  , sen13(0.0)
  , sen14(0.0)
  {
  }

  typedef double _sen1_type;
  double sen1;

  typedef double _sen2_type;
  double sen2;

  typedef double _sen3_type;
  double sen3;

  typedef double _sen4_type;
  double sen4;

  typedef double _sen5_type;
  double sen5;

  typedef double _sen6_type;
  double sen6;

  typedef double _sen7_type;
  double sen7;

  typedef double _sen8_type;
  double sen8;

  typedef double _sen9_type;
  double sen9;

  typedef double _sen10_type;
  double sen10;

  typedef double _sen11_type;
  double sen11;

  typedef double _sen12_type;
  double sen12;

  typedef double _sen13_type;
  double sen13;

  typedef double _sen14_type;
  double sen14;


  typedef boost::shared_ptr< ::epoc::Frecuencias_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::epoc::Frecuencias_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Frecuencias
typedef  ::epoc::Frecuencias_<std::allocator<void> > Frecuencias;

typedef boost::shared_ptr< ::epoc::Frecuencias> FrecuenciasPtr;
typedef boost::shared_ptr< ::epoc::Frecuencias const> FrecuenciasConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::epoc::Frecuencias_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::epoc::Frecuencias_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace epoc

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::epoc::Frecuencias_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::epoc::Frecuencias_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d0613b2dd48ef9386b459a8613f058ce";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd0613b2dd48ef938ULL;
  static const uint64_t static_value2 = 0x6b459a8613f058ceULL;
};

template<class ContainerAllocator>
struct DataType< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "epoc/Frecuencias";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::epoc::Frecuencias_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 sen1\n\
float64 sen2\n\
float64 sen3\n\
float64 sen4\n\
float64 sen5\n\
float64 sen6\n\
float64 sen7\n\
float64 sen8\n\
float64 sen9\n\
float64 sen10\n\
float64 sen11\n\
float64 sen12\n\
float64 sen13\n\
float64 sen14\n\
\n\
";
  }

  static const char* value(const  ::epoc::Frecuencias_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::epoc::Frecuencias_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::epoc::Frecuencias_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sen1);
    stream.next(m.sen2);
    stream.next(m.sen3);
    stream.next(m.sen4);
    stream.next(m.sen5);
    stream.next(m.sen6);
    stream.next(m.sen7);
    stream.next(m.sen8);
    stream.next(m.sen9);
    stream.next(m.sen10);
    stream.next(m.sen11);
    stream.next(m.sen12);
    stream.next(m.sen13);
    stream.next(m.sen14);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Frecuencias_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::epoc::Frecuencias_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::epoc::Frecuencias_<ContainerAllocator> & v) 
  {
    s << indent << "sen1: ";
    Printer<double>::stream(s, indent + "  ", v.sen1);
    s << indent << "sen2: ";
    Printer<double>::stream(s, indent + "  ", v.sen2);
    s << indent << "sen3: ";
    Printer<double>::stream(s, indent + "  ", v.sen3);
    s << indent << "sen4: ";
    Printer<double>::stream(s, indent + "  ", v.sen4);
    s << indent << "sen5: ";
    Printer<double>::stream(s, indent + "  ", v.sen5);
    s << indent << "sen6: ";
    Printer<double>::stream(s, indent + "  ", v.sen6);
    s << indent << "sen7: ";
    Printer<double>::stream(s, indent + "  ", v.sen7);
    s << indent << "sen8: ";
    Printer<double>::stream(s, indent + "  ", v.sen8);
    s << indent << "sen9: ";
    Printer<double>::stream(s, indent + "  ", v.sen9);
    s << indent << "sen10: ";
    Printer<double>::stream(s, indent + "  ", v.sen10);
    s << indent << "sen11: ";
    Printer<double>::stream(s, indent + "  ", v.sen11);
    s << indent << "sen12: ";
    Printer<double>::stream(s, indent + "  ", v.sen12);
    s << indent << "sen13: ";
    Printer<double>::stream(s, indent + "  ", v.sen13);
    s << indent << "sen14: ";
    Printer<double>::stream(s, indent + "  ", v.sen14);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EPOC_MESSAGE_FRECUENCIAS_H

